---
name: Release Binary

on:
  workflow_call:
    inputs:
      targets:
        description: Whitelist of compilation targets to upload GitHub release binaries for. Must be a subset of supported targets.
        type: string
        default: |
          aarch64-apple-darwin
          aarch64-unknown-linux-gnu
          aarch64-unknown-linux-musl
          i686-unknown-linux-gnu
          i686-unknown-linux-musl
          x86_64-apple-darwin
          x86_64-unknown-linux-gnu
          x86_64-unknown-linux-musl
      test-command:
        description: Command used to test your Rust program
        type: string
        default: cargo test
      toolchain:
        description: Rust toolchain specification
        type: string
        default: stable
      disable-semantic-release-cargo:
        description: Disable semantic-release-cargo in your release flow. Only takes effect if the action semantic-release config is used.
        type: boolean
        default: false
      disable-semantic-release-git:
        description: Disable @semantic-release/git in your release flow. Only takes effect if the action semantic-release config is used.
        type: boolean
        default: false
    secrets:
      cargo-registry-token:
        description: API token for writing to your cargo registry
        required: true

# Only allow one release workflow to execute at a time, since each release
# workflow uses shared resources (git tags, package registries)
concurrency:
  group: ${{ github.workflow }}

env:
  RUST_BACKTRACE: 1

jobs:
  get-next-version:
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v2

  configure-compilation-target-matrix:
    name: Configure compilation targets
    runs-on: ubuntu-latest
    needs:
      - get-next-version
    outputs:
      matrix: ${{ steps.configure-compilation-target-matrix.outputs.matrix }}

    steps:
      - id: configure-compilation-target-matrix
        run: |
          : configure compilation target matrix
          matrix="$(jq \
            --argjson whitelist "$(echo "$supported" | jq --raw-input --compact-output --slurp '[splits("[ \n]+")] | map(select(length > 0))')" \
            'map(select(.target | IN($whitelist[])))' \
            <<< "$all_compilation_targets")"
          echo "Using comilation matrix:"
          echo "$matrix"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
        env:
          all_compilation_targets: |
            [
              {
                "target": "aarch64-apple-darwin",
                "host": "macOS-latest",
                "cross": true
              },
              {
                "target": "aarch64-unknown-linux-gnu",
                "host": "ubuntu-latest",
                "cross": true
              },
              {
                "target": "aarch64-unknown-linux-musl",
                "host": "ubuntu-latest",
                "cross": true
              },
              {
                "target": "i686-unknown-linux-gnu",
                "host": "ubuntu-latest",
                "cross": true
              },
              {
                "target": "i686-unknown-linux-musl",
                "host": "ubuntu-latest",
                "cross": true
              },
              {
                "target": "x86_64-apple-darwin",
                "host": "macOS-latest",
                "cross": false
              },
              {
                "target": "x86_64-unknown-linux-gnu",
                "host": "ubuntu-latest",
                "cross": false
              },
              {
                "target": "x86_64-unknown-linux-musl",
                "host": "ubuntu-latest",
                "cross": false
              }
            ]

  test:
    name: Cargo test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: ${{ inputs.toolchain }}

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Test
        run: ${{ inputs.test-command }}

  # Compile release artifacts
  build-release:
    name: Build CLI ${{ matrix.build.target }}
    if: needs.get-next-version.outputs.new-release-published == 'true'
    runs-on: ${{ matrix.build.host }}
    needs:
      - get-next-version
      - configure-compilation-target-matrix
    outputs:
      binary-name: ${{ steps.get-binary-name.outputs.binary-name }}
    env:
      CARGO: cargo

    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(needs.configure-compilation-target-matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install build inputs
        if: runner.os == 'Linux' && !matrix.build.cross && endsWith(matrix.build.target, '-musl')
        run: sudo apt install musl-tools

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: nightly
          target: ${{ matrix.build.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install semantic-release-cargo
        uses: EricCrosson/install-github-release-binary@v2
        with:
          targets: semantic-release-cargo/semantic-release-cargo@v2

      - name: Prepare semantic-release for Rust
        run: semantic-release-cargo --verbose --verbose --verbose prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Detect binary name
        id: get-binary-name
        run: echo "binary-name=$(cargo metadata --no-deps --format-version 1 | jq --raw-output '.packages[0].targets | map(select(.kind[] | contains("bin")).name)[0]')" >> "$GITHUB_OUTPUT"

      - name: Install cross
        uses: taiki-e/install-action@v2
        if: matrix.build.cross
        with:
          tool: cross

      - name: Configure cross
        if: matrix.build.cross
        run: echo "CARGO=cross" >> "$GITHUB_ENV"

      - name: Compile release binary
        run: ${{ env.CARGO }} build --release --target ${{ matrix.build.target }} --verbose

      - name: Create release artifacts
        run: |
          mkdir dist
          cp target/${{ matrix.build.target }}/release/${{ steps.get-binary-name.outputs.binary-name }} dist/${{ steps.get-binary-name.outputs.binary-name }}-${{ matrix.build.target }}

      - name: Create binary checksum
        run: shasum --algorithm 256 --binary ${{ steps.get-binary-name.outputs.binary-name }}-${{ matrix.build.target }} | tee ${{ steps.get-binary-name.outputs.binary-name }}-${{ matrix.build.target }}-SHA256SUM.txt
        working-directory: ./dist

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.build.target }}
          path: |
            dist/${{ steps.get-binary-name.outputs.binary-name }}-${{ matrix.build.target }}
            dist/${{ steps.get-binary-name.outputs.binary-name }}-${{ matrix.build.target }}-SHA256SUM.txt
          if-no-files-found: error
          retention-days: 1

  release:
    name: Release
    if: needs.get-next-version.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    needs:
      - build-release
      - get-next-version
      - test

    steps:
      - name: Release
        uses: semantic-release-action/rust/semantic-release-binary@v4
        with:
          binary-name: ${{ needs.build-release.outputs.binary-name }}
          cargo-registry-token: ${{ secrets.cargo-registry-token }}
          disable-semantic-release-cargo: ${{ inputs.disable-semantic-release-cargo }}
          disable-semantic-release-git: ${{ inputs.disable-semantic-release-git }}
          next-version: ${{ needs.get-next-version.outputs.new-release-version }}
          targets: ${{ inputs.targets }}
